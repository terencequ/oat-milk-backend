{
  "openapi": "3.0.1",
  "info": {
    "title": "OatMilk.Backend.Api",
    "version": "v1"
  },
  "paths": {
    "/Character/full": {
      "get": {
        "tags": [
          "Character"
        ],
        "summary": "Get a paginated, filtered and sorted list of all existing characters, with all details.",
        "parameters": [
          {
            "name": "SearchByName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortColumnName",
            "in": "query",
            "description": "Name of the column to sort by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortAscending",
            "in": "query",
            "description": "Whether or not to sort in ascending order.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponsePageResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponsePageResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponsePageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Character"
        ],
        "summary": "Create a character.",
        "requestBody": {
          "description": "Details of new character.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Character/full/{identifier}": {
      "get": {
        "tags": [
          "Character"
        ],
        "summary": "Get an existing character by its human-readable identifier.",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Human readable unique identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Character/full/{id}": {
      "put": {
        "tags": [
          "Character"
        ],
        "summary": "Update an existing character by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of new character.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Character"
        ],
        "summary": "Delete an existing character by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Character/summary": {
      "get": {
        "tags": [
          "CharacterSummary"
        ],
        "summary": "Get a paginated, filtered and sorted list of all existing characters, as summaries.",
        "parameters": [
          {
            "name": "SearchByName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortColumnName",
            "in": "query",
            "description": "Name of the column to sort by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortAscending",
            "in": "query",
            "description": "Whether or not to sort in ascending order.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterSummaryResponsePageResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterSummaryResponsePageResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterSummaryResponsePageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Ping": {
      "get": {
        "tags": [
          "Ping"
        ],
        "summary": "Basic test endpoint.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/Ping/auth": {
      "get": {
        "tags": [
          "Ping"
        ],
        "summary": "Basic test endpoint. Requires user to be authenticated.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/User/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Login with existing user credentials.",
        "requestBody": {
          "description": "Existing user credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthTokenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthTokenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/User/register": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Register with new user credentials.",
        "requestBody": {
          "description": "New user credentials.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthTokenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthTokenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/User/profile": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get this user's profile.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CharacterAbilityScoreProficiencyRequest": {
        "required": [
          "abilityScoreId",
          "id"
        ],
        "type": "object",
        "properties": {
          "abilityScoreId": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          },
          "id": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "maxLength": 64,
            "type": "string",
            "nullable": true
          },
          "proficient": {
            "type": "boolean"
          },
          "expertise": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CharacterAbilityScoreProficiencyResponse": {
        "required": [
          "expertise",
          "id",
          "name",
          "proficient"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "proficient": {
            "type": "boolean"
          },
          "expertise": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Character ability score proficiency response DTO."
      },
      "CharacterAbilityScoreRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "maxLength": 64,
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "proficient": {
            "type": "boolean"
          },
          "expertise": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CharacterAbilityScoreResponse": {
        "required": [
          "expertise",
          "id",
          "name",
          "proficiencies",
          "proficient",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "proficient": {
            "type": "boolean"
          },
          "expertise": {
            "type": "boolean"
          },
          "proficiencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterAbilityScoreProficiencyResponse"
            }
          }
        },
        "additionalProperties": false,
        "description": "Character ability score response DTO."
      },
      "CharacterAttributeRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "maxLength": 64,
            "type": "string",
            "nullable": true
          },
          "currentValue": {
            "type": "integer",
            "format": "int32"
          },
          "defaultValue": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CharacterAttributeResponse": {
        "required": [
          "currentValue",
          "defaultValue",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "currentValue": {
            "type": "integer",
            "format": "int32"
          },
          "defaultValue": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Character attribute response DTO."
      },
      "CharacterDescriptionRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "maxLength": 64,
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CharacterDescriptionResponse": {
        "required": [
          "id",
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Character description response model."
      },
      "CharacterLevelResponse": {
        "required": [
          "currentLevelExperienceRequirement",
          "experience",
          "nextLevelExperienceRequirement",
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "experience": {
            "type": "integer",
            "format": "int32"
          },
          "currentLevelExperienceRequirement": {
            "type": "integer",
            "format": "int32"
          },
          "nextLevelExperienceRequirement": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "This is a summary of a character's experience, along with some values calculated from that."
      },
      "CharacterRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterAttributeRequest"
            },
            "description": "A list of all attributes. If this is null, character's attributes won't be updated.",
            "nullable": true
          },
          "abilityScores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterAbilityScoreRequest"
            },
            "description": "A list of all attributes. If this is null, character's ability scores won't be updated.",
            "nullable": true
          },
          "abilityScoreProficiencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterAbilityScoreProficiencyRequest"
            },
            "description": "A list of all ability score proficiencies. If this is null, character's proficiencies won't be updated.\r\nAll requests here will be parented under existing ability scores.",
            "nullable": true
          },
          "descriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterDescriptionRequest"
            },
            "description": "A list of all attributes. If this is null, character's descriptions won't be updated.",
            "nullable": true
          },
          "spells": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterSpellRequest"
            },
            "description": "A list of all spells. If this is null, character's spells won't be updated.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CharacterResponse": {
        "required": [
          "abilityScores",
          "attributes",
          "createdDateTimeUtc",
          "descriptions",
          "id",
          "identifier",
          "level",
          "name",
          "spells",
          "updatedDateTimeUtc"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "createdDateTimeUtc": {
            "type": "string",
            "format": "date-time"
          },
          "updatedDateTimeUtc": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "level": {
            "$ref": "#/components/schemas/CharacterLevelResponse"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterAttributeResponse"
            }
          },
          "abilityScores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterAbilityScoreResponse"
            }
          },
          "descriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterDescriptionResponse"
            }
          },
          "spells": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterSpellResponse"
            }
          }
        },
        "additionalProperties": false,
        "description": "Character response DTO."
      },
      "CharacterResponsePageResponse": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CharacterSpellRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "Id of existing spell, or nominal id of new spell."
          },
          "shouldCreateNewId": {
            "type": "boolean",
            "description": "Ticked if a new id should be auto-generated for this spell."
          },
          "name": {
            "maxLength": 64,
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "castingTime": {
            "$ref": "#/components/schemas/SpellCastingTimeRequest"
          },
          "range": {
            "$ref": "#/components/schemas/SpellRangeRequest"
          },
          "components": {
            "$ref": "#/components/schemas/SpellComponentsRequest"
          },
          "duration": {
            "$ref": "#/components/schemas/SpellDurationRequest"
          },
          "school": {
            "$ref": "#/components/schemas/SpellSchool"
          }
        },
        "additionalProperties": false,
        "description": "Request model for spell creation."
      },
      "CharacterSpellResponse": {
        "required": [
          "castingTime",
          "components",
          "description",
          "duration",
          "id",
          "level",
          "name",
          "range",
          "school"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "castingTime": {
            "$ref": "#/components/schemas/SpellCastingTimeResponse"
          },
          "range": {
            "$ref": "#/components/schemas/SpellRangeResponse"
          },
          "components": {
            "$ref": "#/components/schemas/SpellComponentsResponse"
          },
          "duration": {
            "$ref": "#/components/schemas/SpellDurationResponse"
          },
          "school": {
            "$ref": "#/components/schemas/SpellSchool"
          }
        },
        "additionalProperties": false,
        "description": "Character spell response DTO."
      },
      "CharacterSummaryResponse": {
        "required": [
          "alliesAndOrganisations",
          "appearance",
          "backstory",
          "bonds",
          "createdDateTimeUtc",
          "currentHitPoints",
          "experience",
          "flaws",
          "id",
          "ideals",
          "identifier",
          "isAlive",
          "level",
          "maxHitPoints",
          "name",
          "nextLevelExperienceRequirement",
          "personalityTraits",
          "previousLevelExperienceRequirement",
          "updatedDateTimeUtc"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "createdDateTimeUtc": {
            "type": "string",
            "format": "date-time"
          },
          "updatedDateTimeUtc": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "experience": {
            "type": "integer",
            "format": "int32"
          },
          "previousLevelExperienceRequirement": {
            "type": "integer",
            "format": "int32"
          },
          "nextLevelExperienceRequirement": {
            "type": "integer",
            "format": "int32"
          },
          "currentHitPoints": {
            "type": "integer",
            "format": "int32"
          },
          "maxHitPoints": {
            "type": "integer",
            "format": "int32"
          },
          "isAlive": {
            "type": "boolean"
          },
          "backstory": {
            "type": "string"
          },
          "personalityTraits": {
            "type": "string"
          },
          "ideals": {
            "type": "string"
          },
          "bonds": {
            "type": "string"
          },
          "flaws": {
            "type": "string"
          },
          "alliesAndOrganisations": {
            "type": "string"
          },
          "appearance": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "A summarised character DTO used for the display of a character list."
      },
      "CharacterSummaryResponsePageResponse": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterSummaryResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "stackTrace": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SpellCastingTimeRequest": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/SpellCastingTimeType"
          },
          "isRitual": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SpellCastingTimeResponse": {
        "required": [
          "description",
          "isRitual",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/SpellCastingTimeType"
          },
          "isRitual": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SpellCastingTimeType": {
        "enum": [
          "Unspecified",
          "Seconds",
          "Minutes",
          "Hours",
          "Days",
          "Weeks",
          "Months",
          "Years",
          "Actions",
          "BonusAction",
          "Reaction",
          "Rounds",
          "Special"
        ],
        "type": "string"
      },
      "SpellComponentsRequest": {
        "type": "object",
        "properties": {
          "verbal": {
            "type": "boolean"
          },
          "verbalDescription": {
            "type": "string",
            "nullable": true
          },
          "somatic": {
            "type": "boolean"
          },
          "somaticDescription": {
            "type": "string",
            "nullable": true
          },
          "material": {
            "type": "boolean"
          },
          "materialDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SpellComponentsResponse": {
        "required": [
          "material",
          "materialDescription",
          "somatic",
          "somaticDescription",
          "verbal",
          "verbalDescription"
        ],
        "type": "object",
        "properties": {
          "verbal": {
            "type": "boolean"
          },
          "verbalDescription": {
            "type": "string"
          },
          "somatic": {
            "type": "boolean"
          },
          "somaticDescription": {
            "type": "string"
          },
          "material": {
            "type": "boolean"
          },
          "materialDescription": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SpellDurationRequest": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/SpellDurationType"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SpellDurationResponse": {
        "required": [
          "description",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/SpellDurationType"
          },
          "description": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SpellDurationType": {
        "enum": [
          "Unspecified",
          "Seconds",
          "Minutes",
          "Hours",
          "Days",
          "Weeks",
          "Months",
          "Years",
          "Action",
          "Round",
          "Instantaneous",
          "UntilDispelled",
          "UntilDispelledOrTriggered",
          "Special"
        ],
        "type": "string"
      },
      "SpellRangeEffectType": {
        "enum": [
          "Target",
          "Cone",
          "Cube",
          "Cylinder",
          "Line",
          "Sphere",
          "Square"
        ],
        "type": "string"
      },
      "SpellRangeRequest": {
        "type": "object",
        "properties": {
          "targetValue": {
            "type": "integer",
            "format": "int32"
          },
          "targetType": {
            "$ref": "#/components/schemas/SpellRangeTargetType"
          },
          "effectValue": {
            "type": "integer",
            "format": "int32"
          },
          "effectType": {
            "$ref": "#/components/schemas/SpellRangeEffectType"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SpellRangeResponse": {
        "required": [
          "description",
          "effectType",
          "effectValue",
          "targetType",
          "targetValue"
        ],
        "type": "object",
        "properties": {
          "targetValue": {
            "type": "integer",
            "format": "int32"
          },
          "targetType": {
            "$ref": "#/components/schemas/SpellRangeTargetType"
          },
          "effectValue": {
            "type": "integer",
            "format": "int32"
          },
          "effectType": {
            "$ref": "#/components/schemas/SpellRangeEffectType"
          },
          "description": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SpellRangeTargetType": {
        "enum": [
          "Self",
          "Touch",
          "Ranged"
        ],
        "type": "string"
      },
      "SpellSchool": {
        "enum": [
          "Abjuration",
          "Alteration",
          "Conjuration",
          "Divination",
          "Enchantment",
          "Illusion",
          "Invocation",
          "Necromancy"
        ],
        "type": "string"
      },
      "UserAuthTokenResponse": {
        "type": "object",
        "properties": {
          "authToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "JWT Token DTO.\r\nPassed as a response when they login or register. \r\nWill contain the JWT token that is used to authenticate with the backend."
      },
      "UserLoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UserRequest": {
        "required": [
          "displayName",
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 20,
            "minLength": 4,
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "pattern": "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,20}$",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "User DTO.\r\nPassed as a response when a user's details are requested."
      }
    }
  }
}