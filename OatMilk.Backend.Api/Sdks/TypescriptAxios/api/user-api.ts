/* tslint:disable */
/* eslint-disable */
/**
 * OatMilk.Backend.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { UNKNOWN_BASE_TYPE } from '../models';
// @ts-ignore
import { UserAuthTokenResponse } from '../models';
// @ts-ignore
import { UserLoginRequest } from '../models';
// @ts-ignore
import { UserRequest } from '../models';
// @ts-ignore
import { UserResponse } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login with existing user credentials.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] Existing user credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLoginPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/User/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get this user\'s profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/User/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register with new user credentials.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] New user credentials.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegisterPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/User/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login with existing user credentials.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] Existing user credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLoginPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAuthTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLoginPost(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get this user\'s profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProfileGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProfileGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register with new user credentials.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] New user credentials.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRegisterPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAuthTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRegisterPost(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Login with existing user credentials.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] Existing user credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLoginPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<UserAuthTokenResponse> {
            return localVarFp.userLoginPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get this user\'s profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileGet(options?: any): AxiosPromise<UserResponse> {
            return localVarFp.userProfileGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register with new user credentials.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] New user credentials.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegisterPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<UserAuthTokenResponse> {
            return localVarFp.userRegisterPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Login with existing user credentials.
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] Existing user credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userLoginPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return UserApiFp(this.configuration).userLoginPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get this user\'s profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userProfileGet(options?: any) {
        return UserApiFp(this.configuration).userProfileGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register with new user credentials.
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] New user credentials.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userRegisterPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return UserApiFp(this.configuration).userRegisterPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }
}
